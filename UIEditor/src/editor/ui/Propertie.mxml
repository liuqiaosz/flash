<?xml version="1.0" encoding="utf-8"?>
<ui:GenericProperty xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:My="editor.ui.*"
		 width="210" height="100%" xmlns:ui="editor.ui.*" gap="20"
		 >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="OnChangeImage", type="editor.event.NotifyEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import editor.event.NotifyEvent;
			import editor.utils.GlobalStyle;
			import editor.utils.Globals;
			import editor.utils.InlineStyle;
			
			import mx.collections.ArrayCollection;
			
			import pixel.ui.control.UILayoutConstant;
			import pixel.ui.control.UIButton;
			import pixel.ui.control.UICheckBox;
			import pixel.ui.control.UICombobox;
			import pixel.ui.control.UIContainer;
			import pixel.ui.control.UIControl;
			import pixel.ui.control.UIImage;
			import pixel.ui.control.UIPanel;
			import pixel.ui.control.UIProgress;
			import pixel.ui.control.UISlider;
			import pixel.ui.control.UITextInput;
			import pixel.ui.control.UIToggleButton;
			import pixel.ui.control.UIVerticalPanel;
			import pixel.ui.control.UIWindow;
			import pixel.ui.control.asset.AssetImage;
			import pixel.ui.control.asset.IAsset;
			import pixel.ui.control.style.UIStyleLinkEmu;
			import pixel.ui.control.style.UIStyleManager;
			import pixel.ui.control.style.UITextInputStyle;
			import pixel.ui.control.utility.Utils;
			import pixel.ui.control.vo.UIStyleGroup;
			import pixel.ui.control.vo.UIStyleMod;
			import pixel.utility.Tools;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			private var _CurrentControl:UIControl = null;
			
//			[Bindable]
//			private var ButtonStyleFlag:Boolean = false;
//			[Bindable]
//			private var TabStyleFlag:Boolean = false;
//			[Bindable]
//			private var SliderStyleFlag:Boolean = false;
//			[Bindable]
//			private var TabPanelStyleFlag:Boolean = false;
//			[Bindable]
//			private var PanelStyleFlag:Boolean = false;
			[Bindable]
			private var CategoryFlag:Boolean = false;
//			[Bindable]
//			private var LabelStyleFlag:Boolean = false;
//			[Bindable]
//			private var WindowStyleFlag:Boolean = false;
//			[Bindable]
//			private var ImageStyleFlag:Boolean = false;
//			[Bindable]
//			private var TextInputStyleFlag:Boolean = false;
//			[Bindable]
//			private var ComboboxStyleFlag:Boolean = false;
//			[Bindable]
//			private var VerticalPanelStyleFlag:Boolean = false;
//			[Bindable]
//			private var ProgressStyleFlag:Boolean = false;
//			[Bindable]
//			private var checkboxStyleFlag:Boolean = false;
//			[Bindable]
//			private var toggleStyleFlag:Boolean = false;
			
			[Bindable]
			private var StyleLinkEnabled:Boolean = false;
			
			[Bindable]
			private var styleEnabledBind:Boolean = true;
			[Bindable]
			private var propertieEnabledBind:Boolean = true;
			
			private var propertie:GenericProperty = null;
			override public function set Control(Value:UIControl):void
			{
				if(Value == _CurrentControl)
				{
					return;
				}
				super.Control = Value;
			}
			override protected function Initialized():void
			{
				Reset();
				_CurrentControl = Control;
				
				if(_CurrentControl)
				{
					styles = new ArrayCollection();
					StyleLinkEnabled = _CurrentControl.styleLinked;
					var style:UIStyleMod = null;
					var queue:Vector.<UIStyleMod> = null;
					//局部样式
					queue = InlineStyle.styles;
					
					var currentStyleName:String = Utils.getStyleNameByType(Utils.getStyleTypeByPrototype(_CurrentControl.Style));
					var linkIdx:int = -1;
					
					if(_CurrentControl.styleLinked)
					{
						styleEnabledBind = false;
						StyleLink.selected = true;
					}
					for each(style in queue)
					{
						
						if(style.styleName == currentStyleName)
						{
							styles.addItem({
								label : style.id,
								style : style,
								scope : UIStyleLinkEmu.SCOPE_INLINE,
								scopeLabel : "局部"
							});
						}
						if(_CurrentControl.styleLinked && _CurrentControl.styleLinkScope == UIStyleLinkEmu.SCOPE_INLINE)
						{
							if(style.id == _CurrentControl.styleLinkId)
							{
								linkIdx = styles.length - 1;
							}
						}
					}

					//全局样式
					var globalQueue:Vector.<StyleGroupFile> = GlobalStyle.styles;
					var group:StyleGroupFile = null;
					for each(group in globalQueue)
					{
						queue = group.styleGroup.styles;
						for each(style in queue)
						{
							if(style.styleName == currentStyleName)
							{
								styles.addItem({
									
									label : style.id,
									style : style,
									scope : UIStyleLinkEmu.SCOPE_GLOBAL,
									scopeLabel : "全局"
								});
							}
							
							if(_CurrentControl.styleLinked && _CurrentControl.styleLinkScope == UIStyleLinkEmu.SCOPE_GLOBAL)
							{
								if(style.id == _CurrentControl.styleLinkId)
								{
									linkIdx = styles.length - 1;
								}
							}
						}
					}
					
					if(linkIdx >= 0)
					{
						styleCombo.selectedIndex = linkIdx;
					}
				}
				
				Name.text = _CurrentControl.Id;
				//类型
				
				
				if(_CurrentControl is UISlider)
				{
					Category.text = "滑动条";
					//SliderStyleFlag = true;
//					CategoryFlag = true;
					//SliderStyle.Control = _CurrentControl;
					propertie = new SliderProperty();
				}
//				else if(_CurrentControl is HorizontalPanel)
//				{
//					Category.text = "横向面板";
//				}
//				else if(_CurrentControl is VerticalPanel)
//				{
//					Category.text = "横向面板";
//				}
				else if(_CurrentControl is UIToggleButton)
				{
					Category.text = "状态切换按钮";
//					toggleStyleFlag = true;
					propertie = new ToggleButtonPropertie();
					
				}
				else if(_CurrentControl is pixel.ui.control.UIButton)
				{
					Category.text = "简单按钮";
					propertie = new ButtonProperty();
				}
				else if(_CurrentControl is UIVerticalPanel)
				{
					Category.text = "垂直滚动面板";
					propertie = new UIVerticalScrollPropertie();
				}
				else if(_CurrentControl is UIPanel)
				{
					Category.text = "简单面板";
					propertie = new PanelPropertie();
				}
				else if(_CurrentControl is pixel.ui.control.UILabel)
				{
					Category.text = "文本";
					propertie = new LabelPropery();
				}
				else if(_CurrentControl is UIWindow)
				{
				}
				else if(_CurrentControl is UIImage)
				{
					Category.text = "图形";
					propertie = new UIImagePropertie();
				}
				else if(_CurrentControl is UITextInput)
				{
					Category.text = "文本输入框";
					propertie = new TextInputPropertie();
				}
				else if(_CurrentControl is UICombobox)
				{
					Category.text = "下拉框";
					propertie = new ComboboxPropertie();
				}
				else if(_CurrentControl is UIProgress)
				{
					Category.text = "加载条";
					propertie = new UIProgressPropertie();
				}
				else if(_CurrentControl is UICheckBox)
				{
					Category.text = "复选框";
					propertie = new ComboboxPropertie();
				}
				if(propertie)
				{
					propertie.Control = _CurrentControl;
					StyleGroup.addElement(propertie);
					CategoryFlag = true;
					propertie.addEventListener(NotifyEvent.CHANGEIMAGE,OnSubStyleChangeImage);
				}
			}
			
			override public function Reset():void
			{
				if(propertie)
				{
					propertie.removeEventListener(NotifyEvent.CHANGEIMAGE,OnSubStyleChangeImage);
					StyleGroup.removeAllElements();
					propertie = null;
				}
				Name.text = "";
				styleCombo.textInput.editable = false;
				styleCombo.textInput.text = "";
				styleEnabledBind = true;
				StyleLink.selected = false;
			}
			
			[Bindable]
			private static var styles:ArrayCollection = null;
			
			/**
			 * 控件实例名称变更
			 **/
			protected function ControlNameChangeEnter(event:TextOperationEvent):void
			{
				_CurrentControl.Id = Name.text;
			}

			
			private var ImgFile:File = null;
			private var ImgLoader:Loader = null;
			/**
			 * 选择背景图片按钮点击
			 **/
//			private function OnBrowserImage(event:MouseEvent):void
//			{
////				ImgFile = new File();
////				ImgFile.addEventListener(Event.SELECT,OnBackgrundImageSelected);
////				ImgFile.browse([new FileFilter("Images","*.jpg;*.jpeg;*.png")]);
//				//_Trigger = _CurrentControl.Style;
//				var Notify:NotifyEvent = new NotifyEvent(NotifyEvent.CHANGEIMAGE);
//				dispatchEvent(Notify);
//				
//				Callback = OnChangeImageResultNotify;
//			}
			
			/**
			 * 变更背景图片回调通知函数
			 **/
			private function OnChangeImageResultNotify(LibraryId:String,AssetId:String):void
			{
				var AssetItem:IAsset = Globals.FindAssetById(LibraryId,AssetId);
				if(null != AssetItem && AssetItem is AssetImage)
				{
					_CurrentControl.Style.BackgroundImage = AssetImage(AssetItem).image;
					_CurrentControl.Style.BackgroundImageId = AssetId;
					_CurrentControl.Update();
					//BackgroundImg.text = AssetItem.Id;
				}
			}
			private var Callback:Function = null;
			private function OnSubStyleChangeImage(event:NotifyEvent):void
			{
				Callback = event.Params.pop();
			}
			
			/**
			 * 变更图形资源回馈
			 **/
			public function ChangeImageResult(LibraryId:String,AssetId:String):void
			{
				if(Callback != null)
				{
					Callback(LibraryId,AssetId);
					Callback = null;
				}
			}

			protected function styleLinkChanged(event:IndexChangeEvent):void
			{
				var idx:int = event.newIndex;
				if(idx >= 0)
				{
					var value:Object = styles.getItemAt(idx);
					_CurrentControl.setLinkStyle(value.style,value.scope);
					styleEnabledBind = false;
				}
				else
				{
					styleEnabledBind = true;
				}
			}
			
			protected function StyleLinkChanged(event:Event):void
			{
				StyleLinkEnabled = StyleLink.selected;
				styleEnabledBind = !StyleLinkEnabled;
			}
			
		]]>
	</fx:Script>
	
	<s:Scroller width="210" height="100%" id="Scroll">
		<s:VGroup gap="10" paddingTop="5" paddingLeft="5" width="210" height="100%">
			<s:VGroup visible="{CategoryFlag}" includeInLayout="{CategoryFlag}">
				<s:HGroup >
					<s:Label text="控件类型" height="100%" verticalAlign="middle" width="60" />
					<s:Label text="" id="Category" />
					
				</s:HGroup>
				<s:HGroup>
					<s:Label text="控件ID" height="100%" verticalAlign="middle" width="60" />
					<s:TextInput id="Name" change="ControlNameChangeEnter(event)" width="100" restrict="a-z A-Z 0-9"/>
				</s:HGroup>
				
				<s:HGroup>
					<s:Label text="样式外链" height="100%" verticalAlign="middle" width="60" />
					<s:CheckBox id="StyleLink" change="StyleLinkChanged(event)" />
				</s:HGroup>
				
				<s:HGroup visible="{StyleLinkEnabled}" includeInLayout="{StyleLinkEnabled}">
					<s:Label text="样式" height="100%" verticalAlign="middle" width="60" />
					
					<s:ComboBox dataProvider="{styles}" width="120" id="styleCombo" change="styleLinkChanged(event)">
						<s:itemRenderer>
							<fx:Component>
								<mx:HBox>
									<mx:Label color="0x0000FF" text="{data.scopeLabel}" width="30" />
									<mx:VRule width="1" />
									<mx:Label text="{data.label}" />	
								</mx:HBox>
								
							</fx:Component>
						</s:itemRenderer>
					</s:ComboBox>
				</s:HGroup>
			</s:VGroup>
			<s:Group id="StyleGroup">
				<!--
				<My:WindowProperty id="WindowStyle" visible="{WindowStyleFlag}" includeInLayout="{WindowStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)" styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}" />
				<My:PanelProperty id="PanelStyle" visible="{PanelStyleFlag}" includeInLayout="{PanelStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:ButtonProperty id="ButtonStyle" visible="{ButtonStyleFlag}" includeInLayout="{ButtonStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:TabProperty id="TabStyle" visible="{TabStyleFlag}" includeInLayout="{TabStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:SliderProperty id="SliderStyle" visible="{SliderStyleFlag}" includeInLayout="{SliderStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:TabPanelProperty id="TabPanelStyle" visible="{TabPanelStyleFlag}" includeInLayout="{TabPanelStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:LabelPropery id="LabelStyle" visible="{LabelStyleFlag}" includeInLayout="{LabelStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:UIImageProperty id="ImageStyle" visible="{ImageStyleFlag}" includeInLayout="{ImageStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:TextInputProperty id="TextInputStyle" visible="{TextInputStyleFlag}" includeInLayout="{TextInputStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:ComboboxPropertie id="ComboboxStyle" visible="{ComboboxStyleFlag}" includeInLayout="{ComboboxStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:UIVerticalScrollPropertie id="VPanelStyle" visible="{VerticalPanelStyleFlag}" includeInLayout="{VerticalPanelStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:UIProgressPropertie id="ProgressStyle" visible="{ProgressStyleFlag}" includeInLayout="{ProgressStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}"/>
				<My:UICheckBoxProperty id="checkboxStyle" visible="{checkboxStyleFlag}" includeInLayout="{checkboxStyleFlag}" OnChangeImage="OnSubStyleChangeImage(event)"  styleEnabled="{styleEnabledBind}" propertieEnabled="{propertieEnabledBind}" />
				-->
			</s:Group>
			
		</s:VGroup>
	</s:Scroller>
</ui:GenericProperty>
