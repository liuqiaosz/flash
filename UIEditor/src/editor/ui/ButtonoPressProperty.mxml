<?xml version="1.0" encoding="utf-8"?>
<My:AdvancePropertyGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:My="editor.ui.*"
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" gap="10">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="OnChangeImage", type="editor.event.NotifyEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import corecom.control.HorizontalPanel;
			import pixel.ui.control.UIButton;
			import pixel.ui.control.UIPanel;
			import pixel.ui.control.UIControl;
			import pixel.ui.control.UIVerticalPanel;
			import corecom.control.style.IStyle;
			import pixel.ui.control.style.UIButtonStyle;
			
			import editor.event.NotifyEvent;
			import editor.model.asset.Asset;
			import editor.model.asset.AssetBitmap;
			import editor.utils.Globals;
			
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import utility.Tools;
			
			private var _CurrentControl:pixel.ui.control.UIButton = null;
			
			public function DisplayControl(Control:pixel.ui.control.UIButton):void
			{
				Reset();
				_CurrentControl = Control;
				var Style:IStyle = _CurrentControl.MouseDownStyle;
				
				BorderThinkness.value = Style.BorderThinkness;
				BorderColorPicker.selectedColor = Style.BorderColor;
				//BorderCorner.value = Style.BorderCorner;
				BackgroundColorPicker.selectedColor = Style.BackgroundColor;
				BackgroundColorField.text = Tools.Color2Hex(Style.BackgroundColor);
				BorderAlpha.value = Style.BorderAlpha;
				BackgroundImg.text = Style.BackgroundImageId;
				BackgroundAlpha.value = Style.BackgroundAlpha;
			}
			
			/**
			 * 重置面板
			 **/
			private function Reset():void
			{
				BorderThinkness.value = 0;
				BorderColorPicker.selectedColor = 0;
				BorderAlpha.value = 0;
				//BorderCorner.value = 0;
				BackgroundColorPicker.selectedColor = 0;
				BackgroundAlpha.value = 0;
				BackgroundImg.text = "";
				_CurrentControl = null;
			}
			
			/**
			 * 背景颜色变更
			 **/
			protected function BackgroundColorChanged(Event:ColorPickerEvent):void
			{
				if(_CurrentControl)
				{
					_CurrentControl.MouseDownStyle.BackgroundColor = Event.color;
					BackgroundColorField.text = Tools.Color2Hex(Event.color);
					_CurrentControl.Update();
				}
			}
			
			/**
			 * 边框颜色变更
			 **/
			protected function BorderColorChanged(Event:ColorPickerEvent):void
			{
				if(_CurrentControl)
				{
					_CurrentControl.MouseDownStyle.BorderColor = Event.color;
					BorderColorField.text = Tools.Color2Hex(Event.color);
					_CurrentControl.Update();
				}
			}
			/**
			 * 边框颜色文本变更
			 **/
			protected function BorderColorTextChanged(Event:KeyboardEvent):void
			{
				if(Event.keyCode == Keyboard.ENTER)
				{
					var Value:String = BorderColorField.text;
					
					if(Value.indexOf("#") == 0)
					{
						Value = Value.replace("#","0x");
					}
					else
					{
						if(Value.length != 6)
						{
							Alert.show("输入颜色代码非法,请重新输入");
							return;
						}
						Value = "0x" + Value;
					}
					var Code:uint = new uint(Value);
					BorderColorPicker.selectedColor = Code;
					_CurrentControl.MouseDownStyle.BorderColor = Code;
					_CurrentControl.Update();
				}
			}
			
			/**
			 * 背景颜色文本变更
			 **/
			protected function BackgroundColorTextChanged(Event:KeyboardEvent):void
			{
				if(Event.keyCode == Keyboard.ENTER)
				{
					var Value:String = BorderColorField.text;
					
					if(Value.indexOf("#") == 0)
					{
						Value = Value.replace("#","0x");
					}
					else
					{
						if(Value.length != 6)
						{
							Alert.show("输入颜色代码非法,请重新输入,只允许输入格式为RGB的颜色代码");
							return;
						}
						Value = "0x" + Value;
					}
					var Code:uint = new uint(Value);
					BackgroundColorPicker.selectedColor = Code;
					_CurrentControl.MouseDownStyle.BackgroundColor = Code;
					_CurrentControl.Update();
				}
			}
			
			/**
			 * 边框宽度变更
			 **/
			protected function BorderThinknessChanged(event:Event):void
			{
				if(_CurrentControl)
				{
					_CurrentControl.MouseDownStyle.BorderThinkness = BorderThinkness.value;
					_CurrentControl.Update();
				}
			}
			
			/**
			 * 边框圆角变更
			 **/
//			protected function BorderCornerChanged(event:Event):void
//			{
//				if(_CurrentControl)
//				{
//					_CurrentControl.MouseDownStyle.BorderCorner = BorderCorner.value;
//					_CurrentControl.Update();
//				}
//			}
			/**
			 * 边框透明度
			 **/
			protected function BorderAlphaChanged(event:Event):void
			{
				if(_CurrentControl)
				{
					_CurrentControl.MouseDownStyle.BorderAlpha = BorderAlpha.value;
					_CurrentControl.Update();
				}
			}
			
			/**
			 * 背景透明度
			 **/
			protected function BackgroundAlphaChanged(event:Event):void
			{
				if(_CurrentControl)
				{
					_CurrentControl.MouseDownStyle.BackgroundAlpha = BackgroundAlpha.value;
					_CurrentControl.Update();
				}
			}
			
			private var ImgFile:File = null;
			private var ImgLoader:Loader = null;
			/**
			 * 选择背景图片按钮点击
			 **/
			private function OnBrowserImage(event:MouseEvent):void
			{
//				ImgFile = new File();
//				ImgFile.addEventListener(Event.SELECT,OnBackgrundImageSelected);
//				ImgFile.browse([new FileFilter("Images","*.jpg;*.jpeg;*.png")]);
				var Notify:NotifyEvent = new NotifyEvent(NotifyEvent.CHANGEIMAGE);
				//Notify.Params.push(_CurrentControl.MouseOverStyle);
				Notify.Params.push(OnChangeImageResultNotify);
				dispatchEvent(Notify);
			}
			
			private function OnChangeImageResultNotify(LibraryId:String,AssetId:String):void
			{
				var AssetItem:Asset = Globals.FindAssetById(LibraryId,AssetId);
				if(null != AssetItem && AssetItem is AssetBitmap)
				{
					_CurrentControl.MouseDownStyle.BackgroundImage = AssetBitmap(AssetItem).Image;
					_CurrentControl.MouseOverStyle.BackgroundImageId = AssetId;
					_CurrentControl.Update();
					BackgroundImg.text = AssetItem.Id;
				}
			}
			
			/**
			 * 背景图片已选择
			 **/
			private function OnBackgrundImageSelected(event:Event):void
			{
				ImgLoader = new Loader();
				ImgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,OnImageLoaded);
				ImgLoader.load(new URLRequest(ImgFile.nativePath));
				ImgFile.removeEventListener(Event.SELECT,OnBackgrundImageSelected);
				ImgFile = null;
			}
			/**
			 * 背景图片已加载
			 **/
			private function OnImageLoaded(event:Event):void
			{
				var Img:Bitmap = ImgLoader.content as Bitmap;
				ImgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE,OnImageLoaded);
				_CurrentControl.MouseDownStyle.BackgroundImage = Img;
				_CurrentControl.Update();
				ImgLoader = null;
			}
			
			[Bindable]
			private var ScalePropertyVisible:Boolean = false;
			private function OnScale9GridChange(event:MouseEvent):void
			{
				_CurrentControl.MouseDownStyle.Scale9Grid = Scale9Grid.selected;
				ScalePropertyVisible = Scale9Grid.selected;
				//_CurrentControl.Update();
			}
			
			private function ScaleLeftEnter(event:KeyboardEvent):void
			{
				if(event.keyCode != Keyboard.ENTER)
				{
					return;
				}
				var Value:String = StringUtil.trim(TextInput(event.currentTarget).text);
				if(Value == "")
				{
					Value = "1";
				}
				_CurrentControl.MouseDownStyle.Scale9GridLeft = int(Value);
				_CurrentControl.Update();
			}
			private function ScaleRightEnter(event:KeyboardEvent):void
			{
				if(event.keyCode != Keyboard.ENTER)
				{
					return;
				}
				var Value:String = StringUtil.trim(TextInput(event.currentTarget).text);
				if(Value == "")
				{
					Value = "1";
				}
				
				_CurrentControl.MouseDownStyle.Scale9GridRight = int(Value);
				_CurrentControl.Update();
			}
			private function ScaleTopEnter(event:KeyboardEvent):void
			{
				if(event.keyCode != Keyboard.ENTER)
				{
					return;
				}
				var Value:String = StringUtil.trim(TextInput(event.currentTarget).text);
				if(Value == "")
				{
					Value = "1";
				}
				_CurrentControl.MouseDownStyle.Scale9GridTop = int(Value);
				_CurrentControl.Update();
			}
			private function ScaleBottomEnter(event:KeyboardEvent):void
			{
				if(event.keyCode != Keyboard.ENTER)
				{
					return;
				}
				var Value:String = StringUtil.trim(TextInput(event.currentTarget).text);
				if(Value == "")
				{
					Value = "1";
				}
				_CurrentControl.MouseDownStyle.Scale9GridBottom = int(Value);
				_CurrentControl.Update();
			}
		]]>
	</fx:Script>
	<s:Label text="鼠标按下样式" color="0xFF0000" fontSize="14" fontWeight="bold"/>
	<s:HGroup>
		<s:Label text="边框宽度" height="100%" verticalAlign="middle" width="60"/>
		<s:HSlider width="100" maximum="20" stepSize="1" minimum="0" id="BorderThinkness" change="BorderThinknessChanged(event)" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="边框颜色" height="100%" verticalAlign="middle" width="60"/>
		<s:TextInput width="70" id="BorderColorField" keyDown="BorderColorTextChanged(event)"/>
		<mx:ColorPicker showTextField="true" id="BorderColorPicker" change="BorderColorChanged(event)" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="边框透明" height="100%" verticalAlign="middle" width="60"/>
		<s:HSlider width="100" maximum="1.0" stepSize="0.1" minimum="0" id="BorderAlpha" change="BorderAlphaChanged(event)" />
		<s:Label text="1.0" />
	</s:HGroup>
	<!--
	<s:HGroup>
		<s:Label text="边框圆角" height="100%" verticalAlign="middle" width="60"/>
		<s:HSlider width="100" maximum="30" minimum="0" id="BorderCorner" change="BorderCornerChanged(event)" />
	</s:HGroup>
	-->
	<s:HGroup>
		<s:Label text="背景图片" height="100%" verticalAlign="middle" width="60"/>
		<s:TextInput width="90" id="BackgroundImg" />
		<s:Image source="@Embed('../assets/Search.png')" width="26" height="26" smooth="true" smoothingQuality="high" buttonMode="true" click="OnBrowserImage(event)" />
	</s:HGroup>
	
	<s:HGroup>
		<s:CheckBox id="Scale9Grid" label="九宫格切图" click="OnScale9GridChange(event)" />
	</s:HGroup>
	
	<s:VGroup id="ScaleProperty" visible="{ScalePropertyVisible}" includeInLayout="{ScalePropertyVisible}">
		<s:HGroup>
			<s:Label text="左边距" height="100%" verticalAlign="middle" width="60"/>
			<s:TextInput width="90" id="ScaleLeft" text="1" keyDown="ScaleLeftEnter(event)" />
		</s:HGroup>
		<s:HGroup>
			<s:Label text="上边距" height="100%" verticalAlign="middle" width="60"/>
			<s:TextInput width="90" id="ScaleTop"  text="1"  keyDown="ScaleTopEnter(event)" />
		</s:HGroup>
		<s:HGroup>
			<s:Label text="右边距" height="100%" verticalAlign="middle" width="60"/>
			<s:TextInput width="90" id="ScaleRight"  text="1"  keyDown="ScaleRightEnter(event)" />
		</s:HGroup>
		<s:HGroup>
			<s:Label text="下边距" height="100%" verticalAlign="middle" width="60"/>
			<s:TextInput width="90" id="ScaleBottom"  text="1"  keyDown="ScaleBottomEnter(event)" />
		</s:HGroup>
		
		<s:Button label="应用" />
	</s:VGroup>
	
	<s:HGroup>
		<s:Label text="背景颜色" height="100%" verticalAlign="middle" width="60"/>
		<s:TextInput width="70" id="BackgroundColorField" editable="false" />
		<mx:ColorPicker id="BackgroundColorPicker" change="BackgroundColorChanged(event)" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="背景透明" height="100%" verticalAlign="middle" width="60"/>
		<s:HSlider width="100" maximum="1.0" stepSize="0.1" minimum="0" id="BackgroundAlpha" change="BackgroundAlphaChanged(event)" />
		<s:Label text="1.0" />
	</s:HGroup>
</My:AdvancePropertyGroup>
